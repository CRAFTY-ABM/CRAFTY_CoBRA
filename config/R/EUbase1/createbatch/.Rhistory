### Simulation Data ############################################################
if (!exists("simp")) simp <-  craftyr::param_getDefaultSimp()
simp$sim$worldname 			<- "EU"
simp$sim$version			<- NULL
simp$sim$allocversion		<- "NN"
simp$sim$scenario			<- "Baseline"
simp$sim$regionalisation	<- "28"
simp$sim$regions			<- c("AT", "BE", "BG", "CZ", "DE", "DK", "EE", "EL", "ES",
"FI", "FR", "HU", "IE", "IT", "LT", "LU", "LV", "MT",
"NL", "PL", "PT", "RO", "SE", "SI", "SK", "UK")
simp$sim$runids				<- c("0-0")
simp$sim$filepartorder_demands <- c("scenario", "U", "datatype", "U", "regions")
simp$sim$hasregiondir		<- TRUE
### Directories ################################################################
simp$dirs$output$data		<- paste(simp$dirs$outputdir, "Data/", sep="")
simp$dirs$output$rdata		<- paste(simp$dirs$outputdir, "RData/", sep="")
simp$dirs$output$raster		<- paste(simp$dirs$outputdir, "Raster/", sep="")
simp$dirs$output$figures	<- paste(simp$dirs$outputdir, "Figures/", sep="")
simp$dirs$output$reports	<- paste(simp$dirs$outputdir, "Reports/", sep="")
### CSV Column Names ###########################################################
simp$csv$cname_region 		<- "Region"
simp$csv$cname_tick 		<- "Tick"
simp$csv$cname_aft 			<- "Agent"
simp$csv$cname_x			<- "X"
simp$csv$cname_y			<- "Y"
### Model Data ################################################################
simp$mdata$capitals 		<- c("Crop.productivity", "Forest.productivity", "Grassland.productivity",
"Financial.capital","Human.capital", "Social.capital","Manufactured.capital","Urban.capital")
simp$mdata$services			<- c("Meat", "Crops" , "Diversity", "Timber", "Carbon", "Urban", "Recreation")
simp$mdata$aftNames			<- c("-1" = "Unmanaged", "0" = 'Ext_AF', "1" = 'IA',
"2" = 'Int_AF', "3" = 'Int_Fa', "4" = 'IP', "5" = 'MF', "6" = 'Min_man',
"7" = 'Mix_Fa', "8" = 'Mix_For', "9" = 'Mix_P', "10" = 'Multifun', "11" = 'P-Ur',
"12" = 'UL', "13" = 'UMF', "14" = 'Ur', "15" = 'VEP', "16" = 'EP')
simp$dirs$param$getparamdir <- function(simp, datatype = NULL) {
return <- paste(simp$dirs$data,
if (is.null(datatype)) {
simp$sim$folder
} else if (datatype %in% c("capitals")) {
paste("worlds", simp$sim$worldname,
if(!is.null(simp$sim$regionalisation)) paste("regionalisations",
simp$sim$regionalisation, sep="/"), "capitals", sep="/")
} else if (datatype %in% c("demand")) {
paste(simp$sim$folder, "worlds", simp$sim$worldname,
if(!is.null(simp$sim$regionalisation)) paste("regionalisations",
simp$sim$regionalisation, simp$sim$scenario, sep="/"), sep="/")
} else if (datatype %in% c("agentparams")) {
paste(simp$sim$folder, "agents", sep="/")
} else if (datatype %in% c("productivities")) {
paste(simp$sim$folder, "production", sep="/")
} else if (datatype %in% c("competition")) {
paste(simp$sim$folder, "competition", sep="/")
} else if (datatype %in% c("runs")) {
simp$sim$folder
},
sep="/")
}
### Figure Settings ###########################################################
simp$fig$resfactor			<- 2
simp$fig$outputformat 		<- "png" #"jpeg"
simp$fig$init				<- craftyr::output_visualise_initFigure
simp$fig$numfigs			<- 1
simp$fig$numcols			<- 1
simp$fig$height				<- 500
simp$fig$width				<- 500
simp$fig$splitfigs			<- FALSE
simp$fig$facetlabelsize 	<- 14
simp$colours$AFT <- c(
"-1" = "black",
"0" = 'deepskyblue4',
"1" = 'deepskyblue',
"2" = 'darkorchid4',
"3" = 'darkorchid1',
"4" = 'orange1',
"5" = 'lightgoldenrod',
"6" = 'indianred4',
"7" = 'indianred1',
"8" = 'green4',
"9" = 'deepskyblue4',
"10" = 'deepskyblue',
"11" = 'darkorchid4',
"12" = 'darkorchid1',
"13" = 'orange1',
"14" = 'lightgoldenrod',
"15" = 'indianred4'
)
#######################################################################
# Factors for variations
#######################################################################
params <- c('givingIn',	'givingInDistributionMean',	'givingInDistributionSD', 'givingUp',
'givingUpDistributionMean', 'givingUpDistributionSD', 'serviceLevelNoiseMin', 'serviceLevelNoiseMax')
capitalSensitivity <- "medium"
# medium applies a neutral factor of 1, low and high apply according factors as defined below:
giStages <- c("medium")
guStages <- c("medium")
########### GU alteration factors #######################################
factorMatrix <- matrix(rep(1.0, times=length(simp$mdata$aftNames)*length(params)), ncol=length(params))
colnames(factorMatrix) <- params
rownames(factorMatrix) <- simp$mdata$aftNames
# GI and GU need do be defined separated because of cross variations:
paramFactorsGi <- list()
paramFactorsGi[["medium"]] <- factorMatrix
paramFactorsGi[["low"]] <- factorMatrix
paramFactorsGi[["low"]][,"givingIn"] <- 0.8
paramFactorsGi[["low"]][,"givingInDistributionMean"] <- 0.8
paramFactorsGi[["high"]] <- factorMatrix
paramFactorsGi[["high"]][,"givingIn"] <- 1.2
paramFactorsGi[["high"]][,"givingInDistributionMean"] <- 1.2
paramFactorsGu <- list()
paramFactorsGu[["medium"]] <- factorMatrix
paramFactorsGu[["low"]] <- factorMatrix
paramFactorsGu[["low"]][,"givingUp"] <- 0.8
paramFactorsGu[["low"]][,"givingUpDistributionMean"] <- 0.8
paramFactorsGu[["high"]] <- factorMatrix
paramFactorsGu[["high"]][,"givingUp"] <- 1.2
paramFactorsGu[["high"]][,"givingUpDistributionMean"] <- 1.2
# Define deviations for factors < 1
aftFactorsLow <- c()
# Define deviations for factors > 1
aftFactorsHigh <- c()
#######################################################################
# File creation
#######################################################################
###### Load Template
tData <- read.csv(paste(simp$batchcreation$agentparam_tmpldir, "AFT.csv", sep=""))
# uncomment for testing purposes:
# aft = afts[1]
# capSense = capitalSensitivity[1]
# scenario = scenarios[1]
# multifunc = multifuncionality[1]
# giStage = giStages[1]
# guStage = guStages[1]
adaptG <- function(factor, aft) {
if(factor < 1) {
factor = factor * if (aft %in% names(aftFactorsLow)) aftFactorsLow[[aft]] else 1
} else {
if(factor > 1) {
factor = factor * if (aft %in% names(aftFactorsHigh)) aftFactorsHigh[[aft]] else 1
} else factor = 1
}
factor
}
afts <- simp$mdata$aftNames[!simp$mdata$aftNames %in% "Unmanaged"]
afts
for (aft in afts) {
data <- data.frame(stringsAsFactors=FALSE)
aftParamId = -1
for (scenario in simp$batchcreation$scenarios) {
for (giStage in giStages) {
for (guStage in guStages) {
aftParamId = aftParamId + 1
d <- c()
d["aftParamId"] <- aftParamId
giFactor <- paramFactorsGi[[giStage]][aft,]
giFactor <- unlist(lapply(giFactor, adaptG, aft))
guFactor <- paramFactorsGu[[guStage]][aft,]
guFactor <- unlist(lapply(guFactor, adaptG, aft))
d <- c(d,tData[tData$Scenario == scenario & tData$AFT == aft,c(-1,-2,-3)] * giFactor * guFactor)
d["productionCsvFile"] <- paste(simp$batchcreation$versiondirs$production,
"/production/", aft, ".csv", sep="")
data <- rbind(data, as.data.frame(d, stringsAsFactors=FALSE))
}
}
}
filename = paste(simp$batchcreation$inputdatadirs$aftparams,
'/AftParams_', aft, '.csv', sep='')
futile.logger::flog.info("Write AFT param file %s...",
filename,
name = "template.create.aftparam")
shbasic::sh.ensurePath(filename, stripFilename = TRUE)
write.csv(data, filename, row.names = FALSE)
}
data
filename
aft<-afts[1]
i
data <- data.frame(stringsAsFactors=FALSE)
aftParamId = -1
for (scenario in simp$batchcreation$scenarios) {
for (giStage in giStages) {
for (guStage in guStages) {
aftParamId = aftParamId + 1
d <- c()
d["aftParamId"] <- aftParamId
giFactor <- paramFactorsGi[[giStage]][aft,]
giFactor <- unlist(lapply(giFactor, adaptG, aft))
guFactor <- paramFactorsGu[[guStage]][aft,]
guFactor <- unlist(lapply(guFactor, adaptG, aft))
d <- c(d,tData[tData$Scenario == scenario & tData$AFT == aft,c(-1,-2,-3)] * giFactor * guFactor)
d["productionCsvFile"] <- paste(simp$batchcreation$versiondirs$production,
"/production/", aft, ".csv", sep="")
data <- rbind(data, as.data.frame(d, stringsAsFactors=FALSE))
}
}
}
giStages
simp$batchcreation$scenarios
################################################################################
# Version specific SIMulation Properties:
#
# Project:		CRAFTY_CoBRA IMPRESSIONS
# Last update: 	14/10/2016
# Author: 		Sascha Holzhauer
################################################################################
# General SIMulation Properties ################################################
if (!exists("simp")) simp <- craftyr::param_getDefaultSimp()
simp$sim$version				<- "calib"
simp$sim$parentf				<- NULL
simp$sim$scenario				<- "Baseline"
simp$sim$regionalisation		<- "2"
simp$sim$runids					<- c("0-0")
simp$sim$id 					<- "Baseline-0"
### Directories ################################################################
simp = shbasic::shbasic_adjust_outputfolders(simp, pattern = "%VFOLDER%", value =
if (is.null(simp$sim$folder)) "" else (simp$sim$folder))
### Figure Settings ############################################################
simp$fig$resfactor		<- 3
simp$fig$outputformat 	<- "png"
simp$fig$init			<- craftyr::output_visualise_initFigure
simp$fig$numfigs		<- 1
simp$fig$numcols		<- 1
simp$fig$height			<- 1000
simp$fig$width			<- 1500
simp$fig$splitfigs		<- FALSE
simp$fig$facetlabelsize <- 14
### Batch Run Creation Settings #################################################
simp$batchcreation$scenarios				<- c("Baseline")
simp$batchcreation$startrun 				<- 0
simp$batchcreation$regionalisations			<- c("2")
simp$batchcreation$percentage_takeovers 	<- c(30)
simp$batchcreation$competition 				<- "Competition_linear.xml"
simp$batchcreation$institutions				<- "institutions/Institutions_CapitalDynamics.xml"
simp$batchcreation$allocation				<- "GiveUpGiveInAllocationModel.xml"
simp$batchcreation$socialnetwork 			<- "SocialNetwork_HDFF.xml"
simp$batchcreation$searchabilities			<- c(30)
simp$batchcreation$inputdatadir 			<- sprintf("%s/data", simp$dirs$project)
simp$batchcreation$agentparam_tmpldir		<- paste(simp$batchcreation$inputdatadir, "/agents/templates/", sep="")
simp$batchcreation$gu_stages				<- c("medium")
simp$batchcreation$gi_stages				<- c("medium")
simp$batchcreation$placeholders				<- c(0)
simp$batchcreation$inputdatadirs$aftparams	<- paste(simp$batchcreation$inputdatadir, "/agents", sep="")
simp$batchcreation$inputdatadirs$production	<- paste(simp$batchcreation$inputdatadir, "/production", sep="")
simp$batchcreation$inputdatadirs$competition	<- paste(simp$batchcreation$inputdatadir, "/competition", sep="")
simp$batchcreation$inputdatadirs$allocation	<- paste(simp$batchcreation$inputdatadir, "/allocation", sep="")
simp$batchcreation$inputdatadirs$worldfile	<- paste(simp$batchcreation$inputdatadir, "/world", sep="")
simp$batchcreation$inputdatadirs$agentdef 	<- paste(simp$batchcreation$inputdatadir, "/agents", sep="")
simp$batchcreation$laramodel				<- "../lara/RegionalLaraModel.xml"
simp$batchcreation$versiondirs$production	<- "./"
simp$batchcreation$versiondirs$competition	<- "./"
simp$batchcreation$versiondirs$allocation	<- "./"
simp$batchcreation$versiondirs$worldfile	<- "./"
simp$batchcreation$versiondirs$agentdef 	<- "./"
simp$batchcreation$versiondirs$btdef		<- "./"
simp$batchcreation$versiondirs$demandfolder	<- "./"
simp$dirs$param$getparamdir <- function(simp, datatype = NULL) {
return <- paste(simp$dirs$data,
if (is.null(datatype)) {
""
} else if (datatype %in% c("capitals")) {
paste("worlds", simp$sim$worldname,
if(!is.null(simp$sim$regionalisation)) paste("regionalisations",
simp$sim$regionalisation, sep="/"), "capitals", sep="/")
} else if (datatype %in% c("demand")) {
paste("worlds", simp$sim$worldname,
if(!is.null(simp$sim$regionalisation)) paste("regionalisations",
simp$sim$regionalisation, simp$sim$scenario, sep="/"), sep="/")
} else if (datatype %in% c("agentparams")) {
paste("agents", sep="/")
} else if (datatype %in% c("productivities")) {
paste("production", sep="/")
} else if (datatype %in% c("competition")) {
paste("competition", sep="/")
} else if (datatype %in% c("runs")) {
""
},
sep="/")
}
simp$batchcreation$scenarios
aftParamId = aftParamId + 1
aftParamID
aftParamId
d <- c()
d["aftParamId"] <- aftParamId
giFactor <- paramFactorsGi[[giStage]][aft,]
giFactor <- unlist(lapply(giFactor, adaptG, aft))
guFactor <- paramFactorsGu[[guStage]][aft,]
guFactor <- unlist(lapply(guFactor, adaptG, aft))
d <- c(d,tData[tData$Scenario == scenario & tData$AFT == aft,c(-1,-2,-3)] * giFactor * guFactor)
tData$AFT == aft,c(-1,-2,-3)
tData[tData$Scenario == scenario & tData$AFT == aft,c(-1,-2,-3)]
c(d,tData[tData$Scenario == scenario & tData$AFT == aft,c(-1,-2,-3)] * giFactor * guFactor)
d
tData[tData$Scenario == scenario & tData$AFT == aft,c(-1,-2,-3)]
giFactor
tData
tData[tData$Scenario == scenario & tData$AFT == aft]
aft
tData$AFT
as.characterr("aft")
as.character("aft")
as.character(aft)
tData$AFT==as.character(aft)
tData[tData$Scenario == scenario & tData$AFT == as.character(aft)]
tData$AFT == as.character(aft)
tData$Scenario
scenario
simp$batchcreation$scenarios
tData[tData$Scenario == scenario & tData$AFT == as.character(aft)]
scenario
scenario
scenario<-"Baseline"
tData[tData$Scenario == scenario & tData$AFT == as.character(aft)]
c(d,tData[tData$Scenario == scenario & tData$AFT == as.character(aft),c(-1,-2,-3)] * giFactor * guFactor)
data <- data.frame(stringsAsFactors=FALSE)
aftParamId = -1
for (scenario in simp$batchcreation$scenarios) {
for (giStage in giStages) {
for (guStage in guStages) {
aftParamId = aftParamId + 1
d <- c()
d["aftParamId"] <- aftParamId
giFactor <- paramFactorsGi[[giStage]][aft,]
giFactor <- unlist(lapply(giFactor, adaptG, aft))
guFactor <- paramFactorsGu[[guStage]][aft,]
guFactor <- unlist(lapply(guFactor, adaptG, aft))
d <- c(d,tData[tData$Scenario == scenario & tData$AFT == as.character(aft),c(-1,-2,-3)] * giFactor * guFactor)
d["productionCsvFile"] <- paste(simp$batchcreation$versiondirs$production,
"/production/", aft, ".csv", sep="")
data <- rbind(data, as.data.frame(d, stringsAsFactors=FALSE))
}
}
}
filename = paste(simp$batchcreation$inputdatadirs$aftparams,
'/AftParams_', aft, '.csv', sep='')
futile.logger::flog.info("Write AFT param file %s...",
filename,
name = "template.create.aftparam")
shbasic::sh.ensurePath(filename, stripFilename = TRUE)
write.csv(data, filename, row.names = FALSE)
filename
#######################################################################
# Prameter Creation Script (PSC) for AFT parameter CSV files.
#
# Input:		Parameter meta definitions
# Output:		AftParams_<AFT>.csv files
#
# Project:		CRAFTY_CoBRA IMPRESSIONS
# Setting:		base01
# Last update: 	14/10/2016
# Author: 		Sascha Holzhauer
#######################################################################
#######################################################################
# Factors for variations
#######################################################################
params <- c('givingIn',	'givingInDistributionMean',	'givingInDistributionSD', 'givingUp',
'givingUpDistributionMean', 'givingUpDistributionSD', 'serviceLevelNoiseMin', 'serviceLevelNoiseMax')
capitalSensitivity <- "medium"
# medium applies a neutral factor of 1, low and high apply according factors as defined below:
giStages <- c("medium")
guStages <- c("medium")
########### GU alteration factors #######################################
factorMatrix <- matrix(rep(1.0, times=length(simp$mdata$aftNames)*length(params)), ncol=length(params))
colnames(factorMatrix) <- params
rownames(factorMatrix) <- simp$mdata$aftNames
# GI and GU need do be defined separated because of cross variations:
paramFactorsGi <- list()
paramFactorsGi[["medium"]] <- factorMatrix
paramFactorsGi[["low"]] <- factorMatrix
paramFactorsGi[["low"]][,"givingIn"] <- 0.8
paramFactorsGi[["low"]][,"givingInDistributionMean"] <- 0.8
paramFactorsGi[["high"]] <- factorMatrix
paramFactorsGi[["high"]][,"givingIn"] <- 1.2
paramFactorsGi[["high"]][,"givingInDistributionMean"] <- 1.2
paramFactorsGu <- list()
paramFactorsGu[["medium"]] <- factorMatrix
paramFactorsGu[["low"]] <- factorMatrix
paramFactorsGu[["low"]][,"givingUp"] <- 0.8
paramFactorsGu[["low"]][,"givingUpDistributionMean"] <- 0.8
paramFactorsGu[["high"]] <- factorMatrix
paramFactorsGu[["high"]][,"givingUp"] <- 1.2
paramFactorsGu[["high"]][,"givingUpDistributionMean"] <- 1.2
# Define deviations for factors < 1
aftFactorsLow <- c()
# Define deviations for factors > 1
aftFactorsHigh <- c()
#######################################################################
# File creation
#######################################################################
###### Load Template
tData <- read.csv(paste(simp$batchcreation$agentparam_tmpldir, "AFT.csv", sep=""))
# uncomment for testing purposes:
# aft = afts[1]
# capSense = capitalSensitivity[1]
# scenario = scenarios[1]
# multifunc = multifuncionality[1]
# giStage = giStages[1]
# guStage = guStages[1]
adaptG <- function(factor, aft) {
if(factor < 1) {
factor = factor * if (aft %in% names(aftFactorsLow)) aftFactorsLow[[aft]] else 1
} else {
if(factor > 1) {
factor = factor * if (aft %in% names(aftFactorsHigh)) aftFactorsHigh[[aft]] else 1
} else factor = 1
}
factor
}
afts <- simp$mdata$aftNames[!simp$mdata$aftNames %in% "Unmanaged"]
for (aft in afts) {
data <- data.frame(stringsAsFactors=FALSE)
aftParamId = -1
for (scenario in simp$batchcreation$scenarios) {
for (giStage in giStages) {
for (guStage in guStages) {
aftParamId = aftParamId + 1
d <- c()
d["aftParamId"] <- aftParamId
giFactor <- paramFactorsGi[[giStage]][aft,]
giFactor <- unlist(lapply(giFactor, adaptG, aft))
guFactor <- paramFactorsGu[[guStage]][aft,]
guFactor <- unlist(lapply(guFactor, adaptG, aft))
d <- c(d,tData[tData$Scenario == scenario & tData$AFT == as.character(aft),c(-1,-2,-3)] * giFactor * guFactor)
d["productionCsvFile"] <- paste(simp$batchcreation$versiondirs$production,
"/production/", aft, ".csv", sep="")
data <- rbind(data, as.data.frame(d, stringsAsFactors=FALSE))
}
}
}
filename = paste(simp$batchcreation$inputdatadirs$aftparams,
'/AftParams_', aft, '.csv', sep='')
# futile.logger::flog.info("Write AFT param file %s...",
# 			filename,
# 			name = "template.create.aftparam")
shbasic::sh.ensurePath(filename, stripFilename = TRUE)
write.csv(data, filename, row.names = FALSE)
}
simp$paramcreation$startrun
#######################################################################
# Prameter Creation Script (PSC) for Runs parameter CSV file.
# Enables switching on/off variations per parameter.
#
# Input:		Parameter meta definitions
# Output:		Runs.csv
#
# Project:		TEMPLATE
# Setting:		TEMPLATE
# Last update: 	02/09/2015
# Author: 		Sascha Holzhauer
#######################################################################
run = simp$paramcreation$startrun - 1
aftParamId = 0
aftParamIdScenario = -1
d <- data.frame(stringsAsFactors=FALSE)                             # number of variations
for (percentageTakeOvers in simp$batchcreation$percentage_takeovers) {
for (searchability in simp$batchcreation$searchabilities) {
for (scenario in simp$batchcreation$scenarios) {  										#4
for (regionalisation in simp$batchcreation$regionalisations) { 		#1-3
aftParamId = aftParamIdScenario
for (giStage in simp$batchcreation$gi_stages) {
for (guStage in simp$batchcreation$gu_stages) {
aftParamId = aftParamId + 1
for (place in simp$batchcreation$placeholders) {
run = run + 1
data <- list()
data["run"] 			<- run
data["Scenario"] 		<- scenario
data["Version"] 		<- simp$sim$version
data["World"] 			<- simp$sim$worldname
data["Regionalisation"] <- regionalisation
data["aftParamId"] 		<- aftParamId
data["RegionCsvFile"] 	<- paste("/", simp$batchcreation$versiondirs$worldfile, "/worlds/",
simp$sim$worldname, "/regionalisations/", regionalisation, ".csv", sep="")
data["Competition_xml"] <- paste("/", simp$batchcreation$versiondirs$competition, "/competition/",
simp$batchcreation$competition, sep="")
data["Allocation_xml"]  <- paste("/", simp$batchcreation$versiondirs$allocation, "/allocation/",
simp$batchcreation$allocation, sep="")
data["Allocation_percentageCell"] 		<- searchability
data["Allocation_percentageTakeovers"] 	<- percentageTakeOvers
data["Insititutions_xml"] 				<- simp$batchcreation$institutions
data["SocialNetwork_xml"] 				<- simp$batchcreation$socialnetwork
d <- rbind(d, as.data.frame(data, stringsAsFactors=FALSE))
}
}
}
}
}
}
aftParamIdScenario = -1
}
filename = paste(simp$batchcreation$inputdatadir , '/Runs.csv', sep='')
shbasic::sh.ensurePath(filename, stripFilename = TRUE)
# futile.logger::flog.info("Write Run.csv file %s...",
# 		filename,
# 		name = "template.create.runsparam")
write.csv(d, filename, row.names = FALSE)
filename
simp$sim$folder 	<- "EUbase1"
setwd(paste(simp$dirs$simp, simp$sim$folder, "createbatch", sep="/"))
source("../simp.R")
simp$sim$parentf	<- ""
simp$batchcreation$agentparam_tmpldir	<- paste(simp$dirs$project, "data", simp$sim$parentf, "agents/template/", sep="/")
simp$batchcreation$production_tmpldir	<- paste(simp$dirs$project, "data", simp$sim$parentf, "production/defined/", sep="/")
simp$paramcreation$startrun <- 0
## adapt templates
## adapt parameters in scripts
## create basic configuration:
#source("./createAftMultifunctionalProductivityManual.R")
source("./createAftParamCSV.R")
source("./create1by1RunCSV.R")
## generate basic social network configurations using python script
## RUN initial run to generate network
# for evaluation purposes:
#source("./createAftParamVariationMatrixCSV.R")
